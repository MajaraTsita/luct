{"ast":null,"code":"const express = require(\"express\");\nconst router = express.Router();\nconst {\n  Attendance,\n  User,\n  Report\n} = require(\"../models\");\n\n// Example monitoring route\nrouter.get(\"/\", async (req, res) => {\n  try {\n    // ⚠️ This is a simple demo: adjust based on your DB schema\n    const monitoringData = [{\n      courseName: \"Software Engineering\",\n      lecturerName: \"Prof. Banda\",\n      totalRegisteredStudents: 100,\n      actualStudentsPresent: 85\n    }, {\n      courseName: \"Database Systems\",\n      lecturerName: \"Dr. Mwansa\",\n      totalRegisteredStudents: 75,\n      actualStudentsPresent: 60\n    }];\n    res.json(monitoringData);\n  } catch (err) {\n    console.error(\"Monitoring fetch error:\", err);\n    res.status(500).json({\n      error: \"Failed to fetch monitoring data\"\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","Attendance","User","Report","get","req","res","monitoringData","courseName","lecturerName","totalRegisteredStudents","actualStudentsPresent","json","err","console","error","status","module","exports"],"sources":["C:/Users/Administrator/Documents/limkos/frontend/src/pages/Monitoring.js"],"sourcesContent":["const express = require(\"express\");\r\nconst router = express.Router();\r\nconst { Attendance, User, Report } = require(\"../models\");\r\n\r\n// Example monitoring route\r\nrouter.get(\"/\", async (req, res) => {\r\n  try {\r\n    // ⚠️ This is a simple demo: adjust based on your DB schema\r\n    const monitoringData = [\r\n      {\r\n        courseName: \"Software Engineering\",\r\n        lecturerName: \"Prof. Banda\",\r\n        totalRegisteredStudents: 100,\r\n        actualStudentsPresent: 85,\r\n      },\r\n      {\r\n        courseName: \"Database Systems\",\r\n        lecturerName: \"Dr. Mwansa\",\r\n        totalRegisteredStudents: 75,\r\n        actualStudentsPresent: 60,\r\n      },\r\n    ];\r\n\r\n    res.json(monitoringData);\r\n  } catch (err) {\r\n    console.error(\"Monitoring fetch error:\", err);\r\n    res.status(500).json({ error: \"Failed to fetch monitoring data\" });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAM;EAAEC,UAAU;EAAEC,IAAI;EAAEC;AAAO,CAAC,GAAGL,OAAO,CAAC,WAAW,CAAC;;AAEzD;AACAC,MAAM,CAACK,GAAG,CAAC,GAAG,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAClC,IAAI;IACF;IACA,MAAMC,cAAc,GAAG,CACrB;MACEC,UAAU,EAAE,sBAAsB;MAClCC,YAAY,EAAE,aAAa;MAC3BC,uBAAuB,EAAE,GAAG;MAC5BC,qBAAqB,EAAE;IACzB,CAAC,EACD;MACEH,UAAU,EAAE,kBAAkB;MAC9BC,YAAY,EAAE,YAAY;MAC1BC,uBAAuB,EAAE,EAAE;MAC3BC,qBAAqB,EAAE;IACzB,CAAC,CACF;IAEDL,GAAG,CAACM,IAAI,CAACL,cAAc,CAAC;EAC1B,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;IAC7CP,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACJ,IAAI,CAAC;MAAEG,KAAK,EAAE;IAAkC,CAAC,CAAC;EACpE;AACF,CAAC,CAAC;AAEFE,MAAM,CAACC,OAAO,GAAGnB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}